{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Turn static matplotlib charts into interactive web visualizations","text":"<p><code>plotjs</code> is a Python package that transform matplotlib plots into interactive charts with minimum user inputs. You can:</p> <ul> <li>control tooltip labels and grouping</li> <li>add CSS</li> <li>add JavaScript</li> <li>and many more</li> </ul> Warning <p><code>plotjs</code> is in very early stage: expect regular breaking changes.</p>"},{"location":"#get-started","title":"Get started","text":"<p>Matplotlib is great<sup>1</sup>: you can draw anything with it.</p> <p>But Matplotlib's graphics are static<sup>2</sup>, unlike those of plotly or altair, for example.</p> <p>For instance, a chart made with matplotlib looks like this:</p> <pre><code>import matplotlib.pyplot as plt\nfrom plotjs import data\n\ndf = data.load_iris()\n\nfig, ax = plt.subplots()\nax.scatter(\n    df[\"sepal_length\"],\n    df[\"sepal_width\"],\n    c=df[\"species\"].astype(\"category\").cat.codes,\n    s=300,\n    alpha=0.5,\n    ec=\"black\",\n)\n</code></pre> <p></p> <p>This is just a png file, nothing crazy.</p> <p>Wouldn't it be cool if we could, for example, have hover effects? Like, if I put my mouse on a point, it displays something?</p> <p>   Introducting \u2728plotjs\u2728  <p></p> <pre><code>from plotjs import PlotJS\n\n# fmt: off\n(\n    PlotJS(fig=fig)                     # create a PlotJS instance\n    .add_tooltip(labels=df[\"species\"])  # add a tooltip (specie name)\n    .save(\"iframes/quickstart.html\")    # save to an HTML file\n)\n</code></pre> <p><code>plotjs</code> convert any matplotlib Figure to an HTML file that contains an interactive version of your plot. By default, it will highlight the hovered point and fade other points.</p> <p>What if we want to highlight all points from a specie for example?</p> <pre><code>from plotjs import PlotJS\n\n(\n    PlotJS(fig=fig)\n    .add_tooltip(\n        labels=df[\"species\"],\n        groups=df[\"species\"],\n    )\n    .save(\"iframes/quickstart2.html\")\n)\n</code></pre>"},{"location":"#css","title":"CSS","text":"<p>Now, let's say we want to a finer control over the hover effects.</p> <p>That's easily possible with some basic CSS:</p> <ul> <li>we select <code>.hovered</code> to control CSS for the hovered points</li> <li>we select <code>.not-hovered</code> to control CSS for the un-hovered points</li> </ul> <pre><code>from plotjs import PlotJS\n\n(\n    PlotJS(fig=fig)\n    .add_tooltip(\n        labels=df[\"species\"],\n        groups=df[\"species\"],\n    )\n    .add_css(\".hovered{fill: blue !important;}\")\n    .save(\"iframes/quickstart3.html\")\n)\n</code></pre> <p>Learn more about CSS customization</p>"},{"location":"#label-customization","title":"Label customization","text":"<p>Now let's setup better labels than the current ones.</p> <p>The <code>tooltip</code> argument just requires an iterable, and will use this for the labels. That means we can do pretty much whatever we want. For instance, with pandas, we can do:</p> <pre><code>custom_tooltip = df.apply(\n    lambda row: f\"Sepal length = {row['sepal_length']}&lt;br&gt;\"\n    f\"Sepal width = {row['sepal_width']}&lt;br&gt;\"\n    f\"{row['species'].upper()}\",\n    axis=1,\n)\n</code></pre> <p>Then we use this as the new tooltip:</p> <pre><code>from plotjs import PlotJS, css\n\n(\n    PlotJS(fig=fig)\n    .add_tooltip(\n        labels=custom_tooltip,\n        groups=df[\"species\"],\n    )\n    .add_css(\n        css.from_dict(\n            {\n                \".tooltip\": {\n                    \"width\": \"200px\",\n                    \"text-align\": \"center\",\n                    \"opacity\": \"0.7\",\n                    \"font-size\": \"1.1em\",\n                }\n            }\n        )\n    )\n    .save(\"iframes/quickstart4.html\")\n)\n</code></pre> <p>Now that you understand the core components of <code>plotjs</code>, let's see how it looks with a line chart.</p>"},{"location":"#line-chart","title":"Line chart","text":"<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom plotjs import PlotJS\n\nwalk1 = np.cumsum(np.random.choice([-1, 1], size=500))\nwalk2 = np.cumsum(np.random.choice([-1, 1], size=500))\nwalk3 = np.cumsum(np.random.choice([-1, 1], size=500))\n\nfig, ax = plt.subplots(figsize=(10, 5))\nax.plot(walk1, linewidth=8, color=\"#264653\")\nax.plot(walk2, linewidth=8, color=\"#2a9d8f\")\nax.plot(walk3, linewidth=8, color=\"#e9c46a\")\n\n(\n    PlotJS(fig=fig)\n    .add_tooltip(labels=[\"S&amp;P500\", \"CAC40\", \"Bitcoin\"])\n    .save(\"iframes/quickstart5.html\")\n)\n</code></pre>"},{"location":"#barplot","title":"Barplot","text":"<pre><code>import matplotlib.pyplot as plt\nfrom plotjs import PlotJS, css\n\nfig, ax = plt.subplots()\nax.barh(\n    [\"Fries\", \"Cake\", \"Apple\", \"Cheese\", \"Broccoli\"],\n    [10, 30, 40, 50, 35],\n    height=0.6,\n    color=[\"#06d6a0\", \"#06d6a0\", \"#ef476f\", \"#06d6a0\", \"#ef476f\"],\n)\n\n(\n    PlotJS(fig=fig)\n    .add_tooltip(\n        labels=[\"Fries\", \"Cake\", \"Apple\", \"Cheese\", \"Broccoli\"],\n        groups=[\"Good\", \"Good\", \"Bad\", \"Good\", \"Bad\"],\n    )\n    .save(\"iframes/quickstart6.html\")\n)\n</code></pre>"},{"location":"#connect-legend-and-plot-elements","title":"Connect legend and plot elements:","text":"<ul> <li>Scatter plot</li> </ul> <pre><code>import matplotlib.pyplot as plt\nfrom plotjs import PlotJS\n\nfig, ax = plt.subplots()\nfor specie in df[\"species\"].unique():\n    specie_df = df[df[\"species\"] == specie]\n    ax.scatter(\n        specie_df[\"sepal_length\"],\n        specie_df[\"sepal_width\"],\n        s=200,\n        ec=\"black\",\n        label=specie,\n    )\nax.legend()\n\n(\n    PlotJS(fig=fig)\n    .add_tooltip(\n        groups=df[\"species\"],\n    )\n    .save(\"iframes/quickstart7.html\")\n)\n</code></pre> <ul> <li>Line chart</li> </ul> <pre><code>import matplotlib.pyplot as plt\nimport numpy as np\nfrom plotjs import PlotJS\n\nnp.random.seed(0)\n\nlength = 500\nwalk1 = np.cumsum(np.random.choice([-1, 1], size=length))\nwalk2 = np.cumsum(np.random.choice([-1, 1], size=length))\nwalk3 = np.cumsum(np.random.choice([-1, 1], size=length))\n\nlabels = [\"S&amp;P500\", \"CAC40\", \"Bitcoin\"]\n\nfig, ax = plt.subplots(figsize=(10, 5))\nax.plot(walk1, linewidth=8, color=\"#264653\", label=labels[0])\nax.plot(walk2, linewidth=8, color=\"#2a9d8f\", label=labels[1])\nax.plot(walk3, linewidth=8, color=\"#e9c46a\", label=labels[2])\nax.legend()\n\n(\n    PlotJS(fig=fig)\n    .add_tooltip(\n        labels=labels,\n        groups=labels,\n    )\n    .save(\"iframes/quickstart8.html\")\n)\n</code></pre>"},{"location":"#multiple-axes","title":"Multiple Axes","text":"<pre><code>import matplotlib.pyplot as plt\nfrom plotjs import PlotJS, data\n\ndf = data.load_iris()\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 4))\n\nargs = dict(\n    c=df[\"species\"].astype(\"category\").cat.codes,\n    s=300,\n    alpha=0.5,\n    ec=\"black\",\n)\nax1.scatter(df[\"sepal_width\"], df[\"sepal_length\"], **args)\nax2.scatter(df[\"petal_width\"], df[\"petal_length\"], **args)\n\n(\n    PlotJS(fig)\n    .add_tooltip(\n        groups=df[\"species\"],\n        ax=ax1,  # left Axes\n    )\n    .add_tooltip(\n        labels=df[\"species\"],\n        ax=ax2,  # right Axes\n    )\n    .save(\"iframes/quickstart9.html\")\n)\n</code></pre> <p>Right now all Axes are 100% independent. But it's planned to support \"connecting\" Axes. See this issue.</p>"},{"location":"#hover-nearest-element","title":"Hover nearest element","text":"<p><code>plotjs</code> has a great option to even more easily activate hover effects: the <code>hover_nearest</code> argument in <code>add_tooltip()</code>.</p> <p>In short, if set to <code>True</code>, <code>plotjs</code> will hover the closest plot element it can found!</p> <pre><code>import matplotlib.pyplot as plt\nfrom plotjs import data\nfrom plotjs import PlotJS\n\ndf = data.load_iris()\n\nfig, ax = plt.subplots()\nfor specie in df[\"species\"].unique():\n    specie_df = df[df[\"species\"] == specie]\n    ax.scatter(\n        specie_df[\"sepal_length\"],\n        specie_df[\"sepal_width\"],\n        s=200,\n        ec=\"black\",\n    )\n\nPlotJS(fig=fig).add_tooltip(\n    labels=df[\"species\"],\n    groups=df[\"species\"],\n    hover_nearest=True,\n).save(\"iframes/quickstart10.html\")\n</code></pre> <p>And it works with multiple Axes too:</p> <pre><code>import matplotlib.pyplot as plt\nfrom plotjs import PlotJS, data\n\ndf = data.load_iris()\n\nfig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10, 4))\nargs = dict(\n    x=df[\"petal_width\"],\n    y=df[\"petal_length\"],\n    c=df[\"species\"].astype(\"category\").cat.codes,\n    s=300,\n    ec=\"black\",\n)\nax1.scatter(**args)\nax2.scatter(**args)\nax3.scatter(**args)\n\n(\n    PlotJS(fig)\n    .add_tooltip(\n        groups=df[\"species\"],\n        hover_nearest=True,\n        ax=ax1,\n    )\n    .add_tooltip(\n        labels=df[\"species\"],\n        hover_nearest=True,\n        ax=ax2,\n    )\n    .add_tooltip(\n        labels=df[\"species\"],\n        groups=df[\"species\"],\n        hover_nearest=True,\n        ax=ax3,\n    )\n    .save(\"iframes/quickstart11.html\")\n)\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<ul> <li>From PyPI (recommended):</li> </ul> <pre><code>pip install plotjs\n</code></pre> <ul> <li>Latest dev version:</li> </ul> <pre><code>pip install git+https://github.com/y-sunflower/plotjs.git\n</code></pre>"},{"location":"#dependencies","title":"Dependencies","text":"<ul> <li>Python 3.10+</li> <li>matplotlib,   jinja2 and   narwhals</li> </ul>"},{"location":"#important-limitation","title":"Important limitation","text":""},{"location":"#plotting-order","title":"Plotting order","text":"<p>Due to the way <code>plotjs</code> currently works, you need to make sure the order you plot elements and the order of the <code>labels</code>/<code>groups</code> arguments is the same. For instance, the following leads to weird results because we plot the points by the specie order but <code>labels</code> and <code>groups</code> follow the order in the dataframe. See this issue.</p> <pre><code>import matplotlib.pyplot as plt\nfrom plotjs import data\nfrom plotjs import PlotJS\n\ndf = data.load_iris().sample(150)  # randomize the dataset\n\nfig, ax = plt.subplots()\nfor specie in df[\"species\"].unique():\n    specie_df = df[df[\"species\"] == specie]\n    ax.scatter(\n        specie_df[\"sepal_length\"],\n        specie_df[\"sepal_width\"],\n        s=200,\n        ec=\"black\",\n    )\n\nPlotJS(fig=fig).add_tooltip(\n    labels=df[\"species\"],\n    groups=df[\"species\"],\n).save(\"iframes/bug.html\")\n</code></pre> <p>One way to fix this is to not use (or avoid) <code>for</code> loops when plotting.</p> Don't do thisDo this instead <pre><code>for specie in df[\"species\"].unique():\n    specie_df = df[df[\"species\"] == specie]\n    ax.scatter(\n        specie_df[\"sepal_length\"],\n        specie_df[\"sepal_width\"],\n        s=200,\n        ec=\"black\",\n    )\n</code></pre> <p>You can use <code>for</code> loops, assuming you sort your dataframe (see point below).</p> <pre><code>ax.scatter(\n    df[\"sepal_length\"],\n    df[\"sepal_width\"],\n    c=df[\"species\"].astype(\"category\").cat.codes,\n    s=200,\n    ec=\"black\",\n)\n</code></pre> <p>Here the order of your dataframe does not matter.</p> <p>Another way to fix this is to sort <code>labels</code>/<code>groups</code> argument by the same order you created your plot. In this previous case, this would mean to sort them by the <code>species</code> column. Before plotting, you do:</p> <pre><code>df = df.sort_values(\"species\")\n</code></pre>"},{"location":"#appendix","title":"Appendix","text":"<ol> <li> <p>It really is.\u00a0\u21a9</p> </li> <li> <p>To be fair, you can perfectly create interactive charts natively in Matplotlib. It requires to use its interactive mode and GUI backends to allow actions like zooming and panning in desktop windows. For instance, this differs from Plotly or Altair, which offer richer, browser-based interactivity like tooltips and filtering. Matplotlib\u2019s interactivity is more limited and environment-dependent, while Plotly and Altair provide higher-level, web-friendly features.\u00a0\u21a9</p> </li> </ol>"},{"location":"developers/contributing/","title":"Contributing","text":"<p><code>plotjs</code> is still in a very early stage, but contributions is still welcomed!</p> <p>The best way to help the development is to:</p> <ul> <li>list the bugs you found by opening GitHub issues</li> <li>list the features you'd like to see by opening GitHub issues</li> </ul>"},{"location":"developers/contributing/#setting-up-your-environment","title":"Setting up your environment","text":"<p>You need to have the following installed on your machine:</p> <ul> <li>uv</li> <li>Git</li> <li>npm</li> </ul>"},{"location":"developers/contributing/#install-for-development","title":"Install for development","text":"<ul> <li> <p>Fork the repository to your own GitHub account.</p> </li> <li> <p>Clone your forked repository to your local machine:</p> </li> </ul> <pre><code>git clone https://github.com/github_user_name/plotjs.git\ncd plotjs\ngit remote add upstream https://github.com/y-sunflower/plotjs.git\n</code></pre> <ul> <li>Create a new branch:</li> </ul> <pre><code>git checkout -b my-feature\n</code></pre> <ul> <li>Set up your Python environment:</li> </ul> <pre><code>uv sync --all-groups --dev\nuv run pre-commit install\nuv pip install -e .\n</code></pre> <ul> <li>Install npm dependencies:</li> </ul> <pre><code>npm install\n</code></pre>"},{"location":"developers/contributing/#code","title":"Code","text":"<p>You can now make changes to the package and start coding!</p>"},{"location":"developers/contributing/#run-the-test","title":"Run the test","text":"<ul> <li>Test that everything works correctly by running:</li> </ul> <pre><code>make test\n</code></pre>"},{"location":"developers/contributing/#preview-documentation-locally","title":"Preview documentation locally","text":"<pre><code>make preview\n</code></pre>"},{"location":"developers/contributing/#push-changes","title":"Push changes","text":"<ul> <li>Commit and push your changes:</li> </ul> <pre><code>git add -A\ngit commit -m \"description of what you did\"\ngit push\n</code></pre> <ul> <li>Navigate to your fork on GitHub and click the \"Compare &amp; pull request\" button to open a new pull request.</li> </ul> <p>Congrats! Once your PR is merged, it will be part of <code>plotjs</code>.</p> <p></p>"},{"location":"developers/overview/","title":"Overview","text":"<p>The core idea behind <code>plotjs</code> is that since you can natively save a matplotlib plot as SVG, it's possible to manipulate that SVG from the browser.</p> <p></p> <p>In practice, the saved HTML file from <code>plotjs</code> is just:</p> <ul> <li>the SVG output from matplotlib</li> <li>some CSS styling (default and from user)</li> <li>a parser for the SVG (in javascript) and javascript from user</li> </ul>"},{"location":"developers/overview/#core-issues","title":"Core issues","text":"<p>There are 2 things important things to solve at this point:</p> <ul> <li>communicate info from Python to JavaScript</li> <li>parse the SVG with JavaScript</li> </ul> <p>The first point is important because the SVG file is not enough for us to parse it correctly. We need some info from the original matplotlib <code>Figure</code>. This is mainly solved using <code>jinja2</code>, often used in web development. This allows us to pass variables from Python to an HTML template (e.g., simple HTML file with placeholders that we'll fill). The core things we want to pass are:</p> <ul> <li>the SVG of the plot</li> <li>the JavaScript parser (kept in its own js file)</li> <li>additional CSS/JS from the user</li> <li>a dictionnary with custom info (named <code>plot_data_json</code> in the codebase)</li> </ul> <p><code>plot_data_json</code> is passed directly to JavaScript and is then parsed with <code>JSON.parse()</code>. This works because Python dictionnaries can be (assuming a few rules that we respect here) valid JSON and be considered as such.</p> <p>Then we \"just\" have to parse the SVG and apply the effects the user want: hover, onclick effects, etc. You can learn more about how the SVG is parsed here.</p>"},{"location":"developers/parsing-matplotlib-svg/","title":"Parsing matplotlib's SVG","text":"<p>Transforming a static plot into something interactive can't be done (unfortunately) just by saying \"make this interactive.\"</p> <p>But that doesn't mean we have to do mystic things to make it work, because yes, that's perfectly possible without weird hacking stuff.</p>"},{"location":"developers/parsing-matplotlib-svg/#overview","title":"Overview","text":"<p>There are two ways to tackle this problem:</p> <ul> <li>Take a matplotlib Figure (an instance containing all plot elements) and convert it to a more common format such as JSON. We call this serialization. Then, with this JSON file, we recreate the figure with an interactive tool such as D3.js (that's what mpld3 does, by the way!).</li> <li>Use the native matplotlib figure output format (especially SVG) and parse this instead (that's what <code>plotjs</code> does).</li> </ul> <p>The second option is much simpler (well, it depends), because we don't have to:</p> <ul> <li>translate the figure to JSON (which can be painfully complex if you want to handle all edge cases and make it robust),</li> <li>recreate the chart (browsers can display SVG perfectly).</li> </ul> <p>But it means we don't have full control over how the plot is structured (from the browser's point of view). We need to find a way to parse this SVG.</p>"},{"location":"developers/parsing-matplotlib-svg/#parsing-svg","title":"Parsing SVG","text":"<p>For the moment, we just take the user's matplotlib figure and save it as SVG. This is just:</p> <pre><code>plt.savefig(\"plot.svg\")\n</code></pre> <p>Now, let's say the figure contains a scatter plot and we want to add a tooltip: when someone hovers their mouse over a point, it displays a label.</p> <p>The core problem to solve is: \"how do I know what elements from the SVG are points?\"</p> <p>If we're able to find a solution to this, then we're able to do pretty much anything we want.</p> <p>The thing is, there's nothing in the SVG output file that tells us \"this element is a point from the scatter plot.\" Even worse, we don't even know if it's a scatter plot or something completely unrelated, like a choropleth map.</p> <p>For example, here is a polygon of a choropleth map:</p> <pre><code>&lt;path d=\"M -5.94098 449.279178\nL -4.961244 447.127034\nL -4.623284 444.786333\nL -3.951831 442.584471\nL -5.459995 439.551953\nL -5.763812 436.050818\nL -3.764043 431.650797\nL -2.459548 432.213824\nL 0.368893 433.425033\nL 4.436122 437.74466\nL 5.072043 439.840475\nL 2.799722 444.523728\nL 1.620088 448.292228\nL 0.147953 450.236113\nL -1.691322 450.601856\nL -2.215184 449.161231\nL -3.074426 448.947286\nL -4.263489 450.334887\nz\n\" clip-path=\"url(#pf43ab1627f)\" style=\"fill: #424186\"/&gt;\n</code></pre> <p>Here is a point from a scatter plot:</p> <pre><code>&lt;use\n   xlink:href=\"#m81e2893e84\"\n   x=\"145.978182\"\n   y=\"144.288\"\n   style=\"fill: #1f77b4;\n   stroke: #1f77b4\"\n/&gt;\n</code></pre> <p>Here is a line from a line chart:</p> <pre><code>&lt;g id=\"line2d_19\"&gt;\n   &lt;path d=\"M 73.832727 295.488\nL 154.996364 235.008\nL 236.16 174.528\nL 317.323636 114.048\nL 398.487273 53.568\n\"\n   clip-path=\"url(#pd511a61f39)\"\n   style=\"fill: none;\n   stroke: #1f77b4;\n   stroke-width: 1.5;\n   stroke-linecap: square\" /&gt;\n&lt;/g&gt;\n</code></pre> <p>If you pay close attention, you'll see potential patterns in the structure of certain elements.</p> <p>That's exactly what we'll use to determine what kind of plot elements we have.</p> <p>Note: determining the kind of plot elements could have been done (partially) from the Python side, but this felt easier to me to do from the JavaScript side.</p> <p>The next step is to understand matplotlib's underlying objects (called artists) and how that translates to SVG.</p>"},{"location":"developers/parsing-matplotlib-svg/#tldr-artists-in-matplotlib","title":"TL;DR: Artists in matplotlib","text":"<p>In matplotlib, artists are all the visual elements you see on a plot. There is the <code>Artist</code> base class, and all other artists inherit from this class.</p> <p>For example:</p> <ul> <li>the <code>scatter()</code> function returns a <code>PathCollection</code> object, a subclass of <code>Artist</code>,</li> <li>the <code>plot()</code> function returns a <code>Line2D</code> object, a subclass of <code>Artist</code>,</li> <li>and so on.</li> </ul>"},{"location":"developers/parsing-matplotlib-svg/#selecting-artists-from-svg","title":"Selecting artists from SVG","text":"<p>In the SVG output of <code>savefig(\"plot.svg\")</code>, we can find some info about what object was used.</p> <p>For example, all <code>PathCollection</code> objects look like <code>&lt;g id=\"PathCollection_1\"&gt;</code>, <code>&lt;g id=\"PathCollection_2\"&gt;</code>. And since <code>PathCollection</code> is just one or multiple points, we can easily know how many scatter plots there are.</p> <p>For lines, they are represented by <code>Line2D</code>. In the SVG, they look like <code>&lt;g id=\"line2d_1\"&gt;</code>, <code>&lt;g id=\"line2d_2\"&gt;</code>, etc. With this, we can easily detect that there are lines in the chart.</p> <p>But there's a major issue here: not all <code>PathCollection</code> elements are relevant, same for <code>Line2D</code>, and so on.</p> <p>By \"relevant,\" I mean those we want to add interactivity to. For example, what elements here are considered to be a <code>Line2D</code>?</p> <p></p> <p>At first, I thought there were three: one for each main line. But in practice, it's much more:</p> <p></p> <p>What that means is that we can't just select all <code>Line2D</code> elements and give them a hover effect, for instance. We need to find a way to discriminate relevant lines (the three big ones) from the other ones.</p>"},{"location":"developers/parsing-matplotlib-svg/#filtering-artists-from-svg","title":"Filtering artists from SVG","text":"<p>This section might not be up to date with the latest version, but it'll give you an idea of how <code>plotjs</code> detects what is a \"core\" plot element and what is not.</p> <p>It mostly consists of handling edge cases here, and is very different depending on the plot element (<code>Line2D</code>, <code>PathCollection</code>, etc.).</p> <p>For example, in order to select only \"core\" <code>Line2D</code> elements (the three colored ones in the previous image), we do:</p> <pre><code>const lines = svg.selectAll('g[id^=\"line2d\"] path').filter(function () {\n  const clip = d3.select(this).attr(\"clip-path\");\n\n  return (\n    // keep only &lt;path&gt; with clip-path attribute\n    clip &amp;&amp;\n    // that starts with \"url(\"\n    clip.startsWith(\"url(\") &amp;&amp;\n    // and are not child of a #matplotlib.axis\n    !this.closest('g[id^=\"matplotlib.axis\"]')\n  );\n});\n</code></pre> <p>The idea is basically:</p> <ul> <li>select all <code>Line2D</code> elements with the first line,</li> <li>filter to remove non-wanted <code>Line2D</code> elements.</li> </ul> <p>This gives us a <code>lines</code> variable that only contains the lines of interest!</p> <p>The logic is the same for other plot elements: bars, points, polygons, etc.</p> <p></p> <p>You can find the reference page of the parser here</p>"},{"location":"developers/svg-parser-reference/","title":"SVG parser reference","text":""},{"location":"developers/svg-parser-reference/#functions","title":"Functions","text":"findBars(svg, axes_class) \u21d2 <code>d3.Selection</code> <p>Find bar elements (<code>patch</code> groups with clipping) inside a given axes.</p> findPoints(svg, axes_class, tooltip_groups) \u21d2 <code>d3.Selection</code> <p>Find scatter plot points inside a given axes. Handles both <code>&lt;use&gt;</code> and <code>&lt;path&gt;</code> fallback cases, and assigns <code>data-group</code> attributes based on tooltip groups.</p> findLines(svg, axes_class) \u21d2 <code>d3.Selection</code> <p>Find line elements (<code>line2d</code> paths) inside a given axes, excluding axis grid lines.</p> findAreas(svg, axes_class) \u21d2 <code>d3.Selection</code> <p>Find filled area elements (<code>FillBetweenPolyCollection</code> paths) inside a given axes.</p> nearestElementFromMouse(mouseX, mouseY, elements) \u21d2 <code>Element</code> | <code>null</code> <p>Compute the nearest element to the mouse cursor from a set of elements. Uses bounding box centers for distance. This function is used when the <code>hover_nearest</code> argument is true.</p> setHoverEffect(plot_element, axes_class, tooltip_labels, tooltip_groups, show_tooltip, hover_nearest) <p>Attach hover interaction and tooltip display to plot elements. Can highlight nearest element (if enabled) or hovered element directly.</p> <p></p>"},{"location":"developers/svg-parser-reference/#findbarssvg-axes_class-d3selection","title":"findBars(svg, axes_class) \u21d2 <code>d3.Selection</code>","text":"<p>Find bar elements (<code>patch</code> groups with clipping) inside a given axes.</p> <p>Kind: global function Returns: <code>d3.Selection</code> - D3 selection of bar elements.</p> Param Type Description svg <code>d3.Selection</code> D3 selection of the SVG element. axes_class <code>string</code> ID of the axes group (e.g. \"axes_1\"). <p></p>"},{"location":"developers/svg-parser-reference/#findpointssvg-axes_class-tooltip_groups-d3selection","title":"findPoints(svg, axes_class, tooltip_groups) \u21d2 <code>d3.Selection</code>","text":"<p>Find scatter plot points inside a given axes. Handles both <code>&lt;use&gt;</code> and <code>&lt;path&gt;</code> fallback cases, and assigns <code>data-group</code> attributes based on tooltip groups.</p> <p>Kind: global function Returns: <code>d3.Selection</code> - D3 selection of point elements.</p> Param Type Description svg <code>d3.Selection</code> D3 selection of the SVG element. axes_class <code>string</code> ID of the axes group (e.g. \"axes_1\"). tooltip_groups <code>Array.&lt;string&gt;</code> Group identifiers for tooltips, parallel to points. <p></p>"},{"location":"developers/svg-parser-reference/#findlinessvg-axes_class-d3selection","title":"findLines(svg, axes_class) \u21d2 <code>d3.Selection</code>","text":"<p>Find line elements (<code>line2d</code> paths) inside a given axes, excluding axis grid lines.</p> <p>Kind: global function Returns: <code>d3.Selection</code> - D3 selection of line elements.</p> Param Type Description svg <code>d3.Selection</code> D3 selection of the SVG element. axes_class <code>string</code> ID of the axes group. <p></p>"},{"location":"developers/svg-parser-reference/#findareassvg-axes_class-d3selection","title":"findAreas(svg, axes_class) \u21d2 <code>d3.Selection</code>","text":"<p>Find filled area elements (<code>FillBetweenPolyCollection</code> paths) inside a given axes.</p> <p>Kind: global function Returns: <code>d3.Selection</code> - D3 selection of area elements.</p> Param Type Description svg <code>d3.Selection</code> D3 selection of the SVG element. axes_class <code>string</code> ID of the axes group. <p></p>"},{"location":"developers/svg-parser-reference/#nearestelementfrommousemousex-mousey-elements-element-null","title":"nearestElementFromMouse(mouseX, mouseY, elements) \u21d2 <code>Element</code> | <code>null</code>","text":"<p>Compute the nearest element to the mouse cursor from a set of elements. Uses bounding box centers for distance. This function is used when the <code>hover_nearest</code> argument is true.</p> <p>Kind: global function Returns: <code>Element</code> | <code>null</code> - The nearest DOM element or <code>null</code>.</p> Param Type Description mouseX <code>number</code> X coordinate of the mouse relative to SVG. mouseY <code>number</code> Y coordinate of the mouse relative to SVG. elements <code>d3.Selection</code> Selection of candidate elements. <p></p>"},{"location":"developers/svg-parser-reference/#sethovereffectplot_element-axes_class-tooltip_labels-tooltip_groups-show_tooltip-hover_nearest","title":"setHoverEffect(plot_element, axes_class, tooltip_labels, tooltip_groups, show_tooltip, hover_nearest)","text":"<p>Attach hover interaction and tooltip display to plot elements. Can highlight nearest element (if enabled) or hovered element directly.</p> <p>Kind: global function</p> Param Type Description plot_element <code>d3.Selection</code> Selection of plot elements (points, lines, etc.). axes_class <code>string</code> ID of the axes group. tooltip_labels <code>Array.&lt;string&gt;</code> Tooltip labels for each element. tooltip_groups <code>Array.&lt;string&gt;</code> Group identifiers for each element. show_tooltip <code>\"block\"</code> | <code>\"none\"</code> Whether to display tooltips. hover_nearest <code>boolean</code> If true, highlight nearest element instead of hovered one."},{"location":"gallery/","title":"Gallery","text":"<p>This page contains all the <code>plotjs</code> examples from this website.</p> <p>TODO: make this page less ugly and add more diverse examples.</p>"},{"location":"guides/advanced/","title":"TODO: find cool examples to showcase here","text":""},{"location":"guides/advanced/#natural-disasters","title":"Natural disasters","text":"<pre><code>from plotjs import PlotJS, css\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom pypalettes import load_cmap\nfrom highlight_text import fig_text, ax_text\nfrom pyfonts import load_google_font\nfrom drawarrow import ax_arrow\n\nurl = \"https://raw.githubusercontent.com/holtzy/The-Python-Graph-Gallery/master/static/data/disaster-events.csv\"\ndf = pd.read_csv(url)\n\n\ndef remove_agg_rows(entity: str):\n    if entity.lower().startswith(\"all disasters\"):\n        return False\n    else:\n        return True\n\n\ndf = df.replace(\"Dry mass movement\", \"Drought\")\ndf = df[df[\"Entity\"].apply(remove_agg_rows)]\ndf = df[~df[\"Entity\"].isin([\"Fog\", \"Glacial lake outburst flood\"])]\ndf = df.pivot_table(index=\"Entity\", columns=\"Year\", values=\"Disasters\").T\ndf.loc[1900, :] = df.loc[1900, :].fillna(0)\ndf = df[df.index &gt;= 1960]\ndf = df[df.index &lt;= 2023]\ndf = df.interpolate(axis=1)\ndf.head()\n\n# set up the font properties\nfont = load_google_font(\"Bebas Neue\")\nother_font = load_google_font(\"Fira Sans\", weight=\"light\")\nother_bold_font = load_google_font(\"Fira Sans\", weight=\"medium\")\n\n# initialize the figure\nfig, ax = plt.subplots(figsize=(14, 7), dpi=300)\nax.set_axis_off()\n\n# define the x-axis variable and order the columns\ncolumns = df.sum().sort_values().index.to_list()\nx = df.index\n\n# defines color map and mapping with columns\ncolors = load_cmap(\"Dali\").colors\ncolor_mapping = {\n    \"Flood\": colors[4],\n    \"Volcanic activity\": colors[0],\n    \"Wildfire\": colors[6],\n    \"Drought\": colors[7],\n    \"Extreme temperature\": colors[5],\n    \"Wet mass movement\": colors[3],\n    \"Earthquake\": colors[2],\n    \"Extreme weather\": colors[1],\n}\ncolors = [color_mapping[col] for col in columns]\n\n# create the stacked area plot\nareas = np.stack(df[columns].values, axis=-1)\nax.stackplot(x, areas, colors=colors)\n\n# add label for the x-axis\nfor year in range(1960, 2030, 10):\n    ax_text(\n        x=year,\n        y=-10,\n        s=f\"{year}\",\n        va=\"top\",\n        ha=\"left\",\n        fontsize=13,\n        font=font,\n        color=\"grey\",\n    )\n\n# add label for the y-axis\nfor value in range(100, 400, 100):\n    ax_text(\n        x=1960,\n        y=value,\n        s=f\"{value}\",\n        va=\"center\",\n        ha=\"left\",\n        fontsize=13,\n        font=font,\n        color=\"grey\",\n    )\n    ax.plot([1963, 2023], [value, value], color=\"grey\", lw=0.1)\n\n# add title\nfig_text(\n    s=\"More than 1 natural disaster occurs\\n&lt;every day&gt; since the 21st century\",\n    x=0.16,\n    y=0.83,\n    fontsize=24,\n    ha=\"left\",\n    va=\"top\",\n    color=\"black\",\n    font=other_font,\n    fig=fig,\n    highlight_textprops=[{\"font\": other_bold_font}],\n)\n\n# source and credit\ntext = \"\"\"\n&lt;Design&gt;: barbierjoseph.com\n&lt;Data&gt;: EM-DAT, CRED / UCLouvain (2024)\n\"\"\"\nfig_text(\n    s=text,\n    x=0.16,\n    y=0.05,\n    fontsize=10,\n    ha=\"left\",\n    va=\"top\",\n    color=\"black\",\n    fontproperties=other_font,\n    highlight_textprops=[{\"font\": other_bold_font}, {\"font\": other_bold_font}],\n)\n\n# add inline labels\ny_pos = [330, 220, 180, 100, 70, 30, -10, -30]\nfor i in range(len(y_pos)):\n    country = columns[::-1][i]\n    val_2023 = int(df.loc[2023, country])\n    ax_text(\n        x=2030,\n        y=y_pos[i],\n        s=f\"{country.upper()} - {val_2023} disasters in 2023\",\n        va=\"center\",\n        ha=\"left\",\n        font=other_bold_font,\n        fontsize=12,\n        color=colors[7 - i],\n    )\n\n# add inflexion arrows\nx_axis_start = 2023\nx_axis_end = 2030\nradius = 10\narrow_props = {\"clip_on\": False, \"color\": \"black\", \"fill_head\": False}\nax_arrow(\n    tail_position=(x_axis_start, 330), head_position=(x_axis_end, 330), **arrow_props\n)\nax_arrow(\n    tail_position=(x_axis_start, 220), head_position=(x_axis_end, 220), **arrow_props\n)\nax_arrow(\n    tail_position=(x_axis_start, 90),\n    head_position=(x_axis_end, 180),\n    inflection_position=(2040, 180),\n    **arrow_props,\n)\nax_arrow(\n    tail_position=(x_axis_start, 60),\n    head_position=(x_axis_end, 100),\n    inflection_position=(2040, 100),\n    **arrow_props,\n)\nax_arrow(\n    tail_position=(x_axis_start, 45),\n    head_position=(x_axis_end, 70),\n    inflection_position=(2040, 70),\n    **arrow_props,\n)\nax_arrow(\n    tail_position=(x_axis_start, 30), head_position=(x_axis_end, 30), **arrow_props\n)\nax_arrow(\n    tail_position=(x_axis_start, 20),\n    head_position=(x_axis_end, -10),\n    inflection_position=(2040, -10),\n    **arrow_props,\n)\nax_arrow(\n    tail_position=(x_axis_start, 4),\n    head_position=(x_axis_end, -30),\n    inflection_position=(2040, -30),\n    **arrow_props,\n)\nplt.savefig(\"debug.svg\")\n\nPlotJS(fig, bbox_inches=\"tight\").add_css(\n    css.from_dict(\n        {\n            \".tooltip\": {\n                \"width\": \"180px\",\n                \"text-align\": \"center\",\n                \"font-size\": \"1.2em\",\n                \"background\": \"#000814\",\n            }\n        }\n    )\n).add_tooltip(labels=columns).save(\"docs/iframes/area-natural-disasters.html\")\n</code></pre>"},{"location":"guides/advanced/#random-walks","title":"Random walks","text":"<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom plotjs import PlotJS\n\nsize = 10000\n\nlabels = [\"S&amp;P500\", \"CAC40\", \"Bitcoin\", \"Livret A\", \"Default\"]\ngroups = [\"safe\", \"safe\", \"safe\", \"not safe\", \"not safe\"]\n\nfig, axs = plt.subplots(figsize=(10, 10), nrows=2)\naxs[0].plot(\n    np.cumsum(np.random.choice([-1, 1], size=size)),\n    linewidth=5,\n    color=\"#264653\",\n    label=labels[0],\n)\naxs[0].plot(\n    np.cumsum(np.random.choice([-1, 1], size=size)),\n    linewidth=5,\n    color=\"#2a9d8f\",\n    label=labels[1],\n)\naxs[0].plot(\n    np.cumsum(np.random.choice([-1, 1], size=size)),\n    linewidth=5,\n    color=\"#e9c46a\",\n    label=labels[2],\n)\naxs[0].plot(\n    np.cumsum(np.random.choice([-1, 1], size=size)),\n    linewidth=5,\n    color=\"#0077b6\",\n    label=labels[3],\n)\naxs[0].plot(\n    np.cumsum(np.random.choice([-1, 1], size=size)),\n    linewidth=5,\n    color=\"#14213d\",\n    label=labels[4],\n)\naxs[0].legend()\n\naxs[1].plot(\n    np.cumsum(np.random.choice([-1, 1], size=size)),\n    linewidth=5,\n    color=\"#264653\",\n    label=labels[0],\n)\naxs[1].plot(\n    np.cumsum(np.random.choice([-1, 1], size=size)),\n    linewidth=5,\n    color=\"#2a9d8f\",\n    label=labels[1],\n)\naxs[1].plot(\n    np.cumsum(np.random.choice([-1, 1], size=size)),\n    linewidth=5,\n    color=\"#e9c46a\",\n    label=labels[2],\n)\naxs[1].plot(\n    np.cumsum(np.random.choice([-1, 1], size=size)),\n    linewidth=5,\n    color=\"#0077b6\",\n    label=labels[3],\n)\naxs[1].plot(\n    np.cumsum(np.random.choice([-1, 1], size=size)),\n    linewidth=5,\n    color=\"#14213d\",\n    label=labels[4],\n)\naxs[1].legend()\n\n\n(\n    PlotJS(fig=fig)\n    .add_tooltip(labels=labels, groups=labels, ax=axs[0])\n    .add_tooltip(labels=labels, groups=labels, ax=axs[1])\n    .save(\"docs/iframes/random-walk-1.html\")\n)\n</code></pre>"},{"location":"guides/css/","title":"Add your own CSS","text":"<p>With <code>plotjs</code>, you can add your own CSS for advanced plot customization. Here's how it works.</p>"},{"location":"guides/css/#what-is-css","title":"What is CSS?","text":"<p>CSS has two main components:</p> <ul> <li>Selectors: which elements the style applies to</li> <li>Rules: a set of <code>key: value</code> pairs defining the style</li> </ul> <p>A basic CSS rule looks like this:</p> <pre><code>.tooltip {\n  background: red;\n  color: blue;\n}\n</code></pre> <p>This means: \"For all elements with class <code>tooltip</code>, set the background to red and the text color to blue.\"</p>"},{"location":"guides/css/#applying-css-to-a-plot","title":"Applying CSS to a plot","text":"<p>You can directly apply a CSS string to your plot:</p> <pre><code>(\n    PlotJS()\n    .add_tooltip(labels=df[\"tooltip\"])\n    .add_css(\".tooltip { background: red; color: blue; }\")\n)\n</code></pre> <p>CSS doesn\u2019t require indentation: one-liners work fine.</p>"},{"location":"guides/css/#using-a-python-dictionary","title":"Using a Python dictionary","text":"<p>For better readability and reusability, you can define CSS as a dictionary using <code>plotjs.css.from_dict()</code>:</p> <pre><code>from plotjs import css\n\n(\n    PlotJS()\n    .add_tooltip(labels=df[\"tooltip\"])\n    .add_css(css.from_dict({\n        \".tooltip\": {\n            \"background\": \"red\",\n            \"color\": \"blue\"\n        }\n    }))\n)\n</code></pre> <p>Method chaining also works if you want to split styles:</p> <pre><code>(\n    PlotJS()\n    .add_tooltip(labels=df[\"tooltip\"])\n    .add_css(css.from_dict({\".tooltip\": {\"color\": \"blue\"}}))\n    .add_css(css.from_dict({\".tooltip\": {\"background\": \"red\"}}))\n)\n</code></pre>"},{"location":"guides/css/#loading-css-from-a-file","title":"Loading CSS from a file","text":"<p>If your CSS is stored in a <code>.css</code> file like:</p> <pre><code>.tooltip {\n  background: pink;\n  color: yellow;\n}\n</code></pre> <p>You can load it with:</p> <pre><code>from plotjs import css\n\n(\n    PlotJS()\n    .add_tooltip(labels=df[\"tooltip\"])\n    .add_css(css.from_file(\"docs/static/style.css\"))\n)\n</code></pre>"},{"location":"guides/css/#selectable-elements","title":"Selectable elements","text":"<p>To style or add interactivity, you need to select elements using the DOM<sup>1</sup>. These are the most common selectors:</p>"},{"location":"guides/css/#plot-elements","title":"Plot elements","text":"<ul> <li><code>.point</code>: scatter plot points</li> <li><code>.line</code>: line chart lines</li> <li><code>.area</code>: area chart fills</li> <li><code>.bar</code>: bar chart bars</li> <li><code>.plot-element</code>: all of the above</li> </ul> <p>You can combine with <code>.hovered</code> or <code>.not-hovered</code>, e.g., <code>.point.hovered</code>.</p>"},{"location":"guides/css/#misc","title":"Misc","text":"<ul> <li><code>.tooltip</code>: tooltip shown on hover</li> <li><code>svg</code>: the entire SVG element</li> </ul> Question <p>Something missing? Please open an issue!</p>"},{"location":"guides/css/#default-css","title":"Default CSS","text":"<p>You can find the default CSS applied by plotjs here</p>"},{"location":"guides/css/#appendix","title":"Appendix","text":"<ol> <li> <p>The DOM (Document Object Model) is like a tree structure representing your webpage. JavaScript and CSS use it to select, modify, and interact with elements dynamically.\u00a0\u21a9</p> </li> </ol>"},{"location":"guides/embed-graphs/","title":"Embed graphs in different environments","text":"<p>Most of the time you'll want to embed your interactive chart into an app or a website. For this purpose, <code>plotjs</code> offers a few utility tools to make this easy, depending on the tool you're using.</p>"},{"location":"guides/embed-graphs/#quarto","title":"Quarto","text":"<p>The simplest way to embed your plot in Quarto is to save it as an HTML file, and then add an &lt;iframe&gt; below.</p> <pre><code>---\ntitle: Plotjs in a Quarto document\n---\n\n```python\nimport matplotlib.pyplot as plt\nfrom plotjs import PlotJS, data\n\ndf = data.load_iris()\n\nfig, ax = plt.subplots()\nax.scatter(\n    df[\"sepal_length\"],\n    df[\"sepal_width\"],\n    c=df[\"species\"].astype(\"category\").cat.codes,\n    s=300,\n    alpha=0.5,\n    ec=\"black\",\n)\n\n(\n   PlotJS(fig=fig)\n   .add_tooltip(labels=df[\"species\"])\n   .save(\"plot.html\")\n)\n```\n\n&lt;iframe width=\"800\" height=\"600\" src=\"plot.html\" style=\"border:none;\"&gt;&lt;/iframe&gt;\n</code></pre>"},{"location":"guides/embed-graphs/#marimo","title":"Marimo","text":"<p>In marimo, you'll also want to create an iframe, but using the built-in <code>mo.iframe()</code> function instead. This function requires an HTML string that we can get with the <code>as_html()</code> function from <code>plotjs</code>.</p> <pre><code>import marimo as mo\nimport matplotlib.pyplot as plt\nfrom plotjs import PlotJS, data\n\ndf = data.load_iris()\n\nfig, ax = plt.subplots()\nax.scatter(\n    df[\"sepal_length\"],\n    df[\"sepal_width\"],\n    c=df[\"species\"].astype(\"category\").cat.codes,\n    s=300,\n    alpha=0.5,\n    ec=\"black\",\n)\n\nhtml_plot = (\n   PlotJS(fig=fig)\n   .add_tooltip(labels=df[\"species\"])\n   .as_html()\n)\n\nmo.iframe(html_plot)\n</code></pre>"},{"location":"guides/embed-graphs/#any-website","title":"Any website","text":"<p>You can embed an interactive plot in any website by using &lt;iframe&gt;. For instance, a minimalist page of a website could look like this:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;title&gt;Minimalist Iframe Page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;iframe src=\"plot.html\"&gt;&lt;/iframe&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Here it assumes that \"plot.html\" is a file that you have locally.</p> <p>It can also be from a remote location:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;title&gt;Minimalist Iframe Page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;iframe src=\"https://yourdomain.com/plot.html\"&gt;&lt;/iframe&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"guides/embed-graphs/#jupyter","title":"Jupyter","text":"<p>It currently does not work in Jupyter environments such as Jupyter notebooks and Jupyter labs, and is not considered to be a high priority. Unless many people ask for it, it's not planned to be implemented in a near future.</p> <p>But if you want to implement it yourself, PRs welcome!</p>"},{"location":"guides/javascript/","title":"Add your own JavaScript","text":"<p>Under the hood, JavaScript is what is used to make the charts interactive. But <code>plotjs</code> allows anyone to add some more JavaScript for finer control of what is happening and basically do whatever you want!</p>"},{"location":"guides/javascript/#basic-example","title":"Basic example","text":"<p>Try to click on one of the points in the chart!</p> <pre><code>import matplotlib.pyplot as plt\nfrom plotjs import data, PlotJS\n\ndf = data.load_iris()\n\nfig, ax = plt.subplots()\nax.scatter(\n    df[\"sepal_length\"],\n    df[\"sepal_width\"],\n    c=df[\"species\"].astype(\"category\").cat.codes,\n    s=300,\n    alpha=0.5,\n    ec=\"black\",\n)\n\n(\n    PlotJS(fig=fig)\n    .add_tooltip(labels=df[\"species\"])\n    .add_javascript(\n        \"\"\"\nd3.selectAll(\".point\").on(\"click\", () =&gt;\n  alert(\"I wish cookies were 0 calories...\")\n);\n\"\"\"\n    )\n)\n</code></pre> <p>Relevant code here is:</p> <pre><code>d3.selectAll(\".point\").on(\"click\", () =&gt;\n  alert(\"I wish cookies were 0 calories...\")\n);\n</code></pre> <p>Here\u2019s what it does:</p> <ul> <li>selects all points (e.g., from the scatter plot)</li> <li>sets that when clicking one of the points</li> <li>it displays a message</li> </ul>"},{"location":"guides/javascript/#loading-javascript-from-file","title":"Loading JavaScript from file","text":"<p><code>plotjs</code> requires the JavaScript to be in a string, but it's far from being a comfortable way of coding. So there is a convenient function to load JavaScript from a file:</p> <pre><code>from plotjs import javascript\n\nPlotJS(fig=fig).add_javascript(\n    javascript.from_file(\"my_script.js\"),\n)\n</code></pre> <p>This allows you to write JavaScript in a separate file so that you can have a code formatter (prettier, etc.), code completion, syntax highlighting, and so on. This is what is recommended to do if you're writing a significant amount of code.</p>"},{"location":"guides/javascript/#advanced-usage","title":"Advanced usage","text":"<pre><code>import matplotlib.pyplot as plt\nfrom plotjs import PlotJS, data\n\ndf = data.load_iris()\n\nfig, ax = plt.subplots()\n\nfor specie in df[\"species\"].unique():\n    specie_df = df[df[\"species\"] == specie]\n    ax.scatter(\n        specie_df[\"sepal_length\"],\n        specie_df[\"sepal_width\"],\n        s=200,\n        ec=\"black\",\n        label=specie,\n    )\nax.legend()\n\ncustom_js: str = \"\"\"\ndocument.querySelectorAll('.point').forEach(el =&gt; {\nel.addEventListener('click', function() {\n    const group = this.getAttribute('data-group');\n\n    // Toggle logic\n    const active = this.classList.contains('clicked');\n    document.querySelectorAll('.point').forEach(p =&gt; {\n    p.classList.remove('clicked');\n    p.classList.remove('dimmed');\n    });\n\n    if (!active) {\n    this.classList.add('clicked');\n    document.querySelectorAll('.point').forEach(p =&gt; {\n        if (p.getAttribute('data-group') !== group) {\n        p.classList.add('dimmed');\n        }\n    });\n    }\n});\n});\n\"\"\"\n\ncustom_css: str = \"\"\"\n.point.dimmed {\n    opacity: 0.2;\n}\n.point.clicked {\n    stroke-width: 3px;\n}\n\"\"\"\n\n(\n    PlotJS(fig=fig)\n    .add_tooltip(\n        labels=df[\"species\"],\n        groups=df[\"species\"],\n    )\n    .add_css(custom_css)\n    .add_javascript(custom_js)\n)\n</code></pre>"},{"location":"guides/javascript/#elements-to-select","title":"Elements to select","text":"<p>In order to apply CSS or JavaScript, you need to select elements from the DOM<sup>1</sup>. You can find most of them using the inspector of your browser. All the common ones are defined below:</p>"},{"location":"guides/javascript/#plot-elements","title":"Plot elements","text":"<ul> <li><code>.point</code>: all points from a scatter plot</li> <li><code>.line</code>: all lines from a line chart</li> <li><code>.area</code>: all areas from an area chart</li> <li><code>.bar</code>: all bars from a bar chart</li> <li><code>.plot-element</code>: all previous elements (points, lines, areas, and bars)</li> </ul> <p>For all of those previous elements, you can add <code>.hovered</code> or <code>.not-hovered</code> (e.g., <code>.point.not-hovered</code>) to, respectively, select currently hovered and not-hovered elements.</p>"},{"location":"guides/javascript/#misc","title":"Misc","text":"<ul> <li><code>.tooltip</code>: the tooltip displayed when hovering elements</li> <li><code>svg</code>: the entire SVG containing the chart</li> </ul> Question <p>Something's missing? Please tell me about it by opening a new issue!</p>"},{"location":"guides/javascript/#appendix","title":"Appendix","text":"<ol> <li> <p>The DOM (Document Object Model) is a tree-like structure that represents all the elements of a web page, allowing JavaScript to read, change, and interact with them. Think of it as a live map of the webpage that your code can explore and update in real time.\u00a0\u21a9</p> </li> </ol>"},{"location":"guides/troubleshooting/","title":"Troubleshooting","text":"<p>Since <code>plotjs</code> does many things via JavaScript (e.g., in your browser when you open your HTML file), you may easily encounter \"silent\" errors.</p> <p>In practice, you will run your Python and everything will seem fine, but that does not mean what you'll see in the output is what you expected. There may be multiple reasons for this. Here I'll explain common things that can happen, and how to debug them.</p>"},{"location":"guides/troubleshooting/#developer-tools","title":"Developer tools","text":"<p>Your browser has a thing called developer tools. It allows you to view many things, but here we're mostly interested in its \"console\" section.</p> <p>The console displays all the messages, including error messages, that the web page encountered at some point. Many of them are not necessarily interesting and are standard messages, but some of them might come from <code>plotjs</code> doing something wrong.</p> <p>How to open the developer tools is browser-specific, but there's likely a shortcut to make it convenient. For instance, on macOS + Firefox I use Option+Cmd+I.</p> <p>Once open, you'll also be able to find messages from <code>plotjs</code>, such as the number of \"points\" (scatter plot) or \"lines\" (line plot) that have been found. This can give you clues as to what's going wrong.</p>"},{"location":"guides/troubleshooting/#debug-plotjs","title":"Debug <code>plotjs</code>","text":""},{"location":"guides/troubleshooting/#workflow","title":"Workflow","text":"<p>Since currently <code>plotjs</code> can't (yet) really be displayed in tools like Jupyter notebooks, marimo, etc., you have to open the output HTML file in your browser.</p> <p>In order to have a comfortable workflow, it's recommended to have <code>live-server</code> installed on your machine for automatic reload on file changes. Assuming you name your HTML file <code>mychart.html</code>, you'll just have to run <code>live-server mychart.html</code> and it'll open your plot in your default browser. Every time <code>mychart.html</code> is updated, it'll refresh the page. This makes debugging and iterating much faster and easier.</p>"},{"location":"guides/troubleshooting/#debugging","title":"Debugging","text":"<p>If you don't see what you expect in your chart, the first thing to do is to check the console. If you see any error message in it, that might be related to why it's not working as expected.</p> <p>If you added your own CSS/JavaScript, make sure that:</p> <ul> <li>they use valid selectors</li> <li>they are actually included in the HTML page</li> </ul>"},{"location":"guides/troubleshooting/#invalid-hovered-elements","title":"Invalid hovered elements","text":"<p>You may encounter a bug in which the elements of the graph you hover over appear random. The main reason is probably that the plot order and <code>labels</code>/<code>groups</code> arguments are not the same.</p> <p>You can learn more about how to fix this here.</p>"},{"location":"guides/troubleshooting/#using-llms","title":"Using LLMs","text":""},{"location":"guides/troubleshooting/#send-html-output","title":"Send HTML output","text":"<p>Depending on the size of your HTML output, you can try dumping everything into chatGPT (or your favorite LLM) and asking why there's unwanted behavior. The main limitation will be the maximum context size accepted by your LLM.</p>"},{"location":"guides/troubleshooting/#prompt","title":"Prompt","text":"<p>If you want to give more context about <code>plotjs</code> to the LLM, you can use the following prompt to give it the most important info.</p> <pre><code>plotjs is a new Python package that aims to convert matplotlib charts into web-based visualization. It works by parsing the SVG output with javascript to automatically detect what is a point from a scatter plot, a line from a line chart etc, with minimum user inputs.\n\nHere are some code snippets to help you understand how to use it. Assuming we have a chart like this:\n\n```py\nimport matplotlib.pyplot as plt\nfrom plotjs import data\n\ndf = data.load_iris()\n\nfig, ax = plt.subplots()\nax.scatter(\n    df[\"sepal_length\"],\n    df[\"sepal_width\"],\n    c=df[\"species\"].astype(\"category\").cat.codes,\n    s=300,\n    alpha=0.5,\n    ec=\"black\",\n)\n```\n\n- minimalist usage (labels can be any kind of iterable and series):\n\n```py\nfrom plotjs import PlotJS\n\nPlotJS(fig=fig).add_tooltip(\n    labels=df[\"species\"],\n).save(\"index.html\")\n```\n\n- group the hover effect by specie (groups can be any kind of iterable and series):\n\n```py\nfrom plotjs import PlotJS\n\n(\n    PlotJS(fig=fig)\n    .add_tooltip(\n        labels=df[\"species\"],\n        groups=df[\"species\"],\n    )\n    .save(\"index.html\")\n)\n```\n\n- add CSS\n\n```py\nfrom plotjs import PlotJS\n\n(\n    PlotJS(fig=fig)\n    .add_tooltip(\n        labels=df[\"species\"],\n        groups=df[\"species\"],\n    )\n    .add_css(\".hovered{fill: blue !important;}\")\n    .save(\"index.html\")\n)\n```\n\n- you can also work with multiple Axes, assuming you explicit which Axes to use (it uses plt.gca() otherwise):\n\n```py\nimport matplotlib.pyplot as plt\nfrom plotjs import PlotJS, data\n\ndf = data.load_iris()\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 4))\n\nargs = dict(\n    c=df[\"species\"].astype(\"category\").cat.codes,\n    s=300,\n    alpha=0.5,\n    ec=\"black\",\n)\nax1.scatter(df[\"sepal_width\"], df[\"sepal_length\"], **args)\nax2.scatter(df[\"petal_width\"], df[\"petal_length\"], **args)\n\n(\n    PlotJS(fig)\n    .add_tooltip(\n        groups=df[\"species\"],\n        ax=ax1,  # left Axes\n    )\n    .add_tooltip(\n        labels=df[\"species\"],\n        ax=ax2,  # right Axes\n    )\n    .save(\"index.html\")\n)\n```\n\n- Add javascript\n\n```py\n(\n    PlotJS(fig=fig)\n    .add_tooltip(labels=df[\"species\"])\n    .add_javascript(\n        \"\"\"\nd3.selectAll(\".point\").on(\"click\", () =&gt;\n  alert(\"I wish cookies were 0 calories...\")\n);\n\"\"\"\n    )\n)\n```\n\nIf you're able to browse the web, you can find the complete documentation here: https://y-sunflower.github.io/plotjs/ and a guide on how to troubleshoot here: https://y-sunflower.github.io/plotjs/guides/troubleshooting/.\n\nCurrently, plotjs does not really work with Jupyter, but well with Quarto (using iframes), marimo:\n\n```py\nhtml_plot = (\n   PlotJS(fig=fig)\n   .add_tooltip(labels=df[\"species\"])\n   .as_html()\n)\n\nmo.iframe(html_plot)\n```\n\nCurrently, using plotjs with seaborn might lead to unexpected behavior, and there is not easy fix for users.\n\n## Selectable elements\n\nTo style or add interactivity, you need to select elements using the DOM[^1]. These are the most common selectors:\n\n### Plot elements\n\n- `.point`: scatter plot points\n- `.line`: line chart lines\n- `.area`: area chart fills\n- `.bar`: bar chart bars\n- `.plot-element`: all of the above\n\nYou can combine with `.hovered` or `.not-hovered`, e.g., `.point.hovered`.\n\n### Misc\n\n- `.tooltip`: tooltip shown on hover\n- `svg`: the entire SVG element\n</code></pre>"},{"location":"reference/css/","title":"CSS","text":"<p><code>plotjs</code> offers a few utility functions to work with CSS, and a guide on how to work with CSS.</p> <p></p> <p></p> <p></p>"},{"location":"reference/css/#plotjs.css.from_dict","title":"<code>plotjs.css.from_dict(css_dict)</code>","text":"<p>Get raw CSS in a string from a dictionnary. It's a utility function useful to write CSS from a Python dictionnary.</p> <p>Parameters:</p> Name Type Description Default <code>css_dict</code> <code>dict</code> <p>A dictionnary with keys (selectors) and value (dictionnary of property-value).</p> required <p>Returns:</p> Type Description <code>str</code> <p>A string of raw CSS.</p> <p>Examples:</p> <pre><code>from plotjs import css\n\ncss.from_dict({\n    \".tooltip\": {\"color\": \"red\", \"background\": \"blue !important\"},\n    \".point\": {\"width\": \"10px\", \"height\": \"200px\"},\n})\n</code></pre>"},{"location":"reference/css/#plotjs.css.from_file","title":"<code>plotjs.css.from_file(css_file)</code>","text":"<p>Get raw CSS from a CSS file. This function just reads the CSS from a given file and checks that it looks like valid CSS.</p> <p>Parameters:</p> Name Type Description Default <code>css_file</code> <code>str</code> <p>Path to a CSS file.</p> required <p>Returns:</p> Type Description <code>str</code> <p>A string of raw CSS</p> <p>Examples:</p> <pre><code>from plotjs import css\n\ncss.from_file(\"path/to/style.css\")\n</code></pre>"},{"location":"reference/css/#plotjs.css.is_css_like","title":"<code>plotjs.css.is_css_like(s)</code>","text":"<p>Check whether a string looks like valid CSS. This function is primarly used internally, but you can use it too.</p> <p>Parameters:</p> Name Type Description Default <code>s</code> <code>str</code> <p>A string to evaluate.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>Whether or not <code>s</code> looks like valid CSS.</p> <p>Examples:</p> <pre><code>from plotjs import is_css_like\n\nis_css_like(\"This is not CSS.\") # False\nis_css_like(\".box { broken }\") # False\nis_css_like(\".tooltip { color: red; background: blue; }\") # True\n</code></pre>"},{"location":"reference/datasets/","title":"Built-in datasets","text":"<p><code>plotjs</code> has a few datasets that you can load easily:</p> <ul> <li>iris</li> <li>mtcars</li> <li>titanic</li> </ul> <p></p> <p></p> <p></p>"},{"location":"reference/datasets/#plotjs.data.load_iris","title":"<code>plotjs.data.load_iris(output_format='pandas')</code>","text":"<p>Load the iris dataset.</p> <p>Parameters:</p> Name Type Description Default <code>output_format</code> <code>str</code> <p>The output format of the dataframe. Note that, for example, if you set <code>output_format=\"polars\"</code>, you must have polars installed. Must be one of the following: \"pandas\", \"polars\", \"pyarrow\", \"modin\", \"cudf\". Default to \"pandas\".</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>Frame</code> <p>The iris dataset.</p> <p>Examples:</p> <pre><code>from plotjs import data\n\ndf = data.load_iris()\n</code></pre> <pre><code>from plotjs import data\n\ndf = data.load_iris(\"polars\")\n</code></pre> <pre><code>from plotjs import data\n\ndf = data.load_iris(\"pyarrow\")\n</code></pre>"},{"location":"reference/datasets/#plotjs.data.load_mtcars","title":"<code>plotjs.data.load_mtcars(output_format='pandas')</code>","text":"<p>Load the mtcars dataset.</p> <p>Parameters:</p> Name Type Description Default <code>output_format</code> <code>str</code> <p>The output format of the dataframe. Note that, for example, if you set <code>output_format=\"polars\"</code>, you must have polars installed. Must be one of the following: \"pandas\", \"polars\", \"pyarrow\", \"modin\", \"cudf\". Default to \"pandas\".</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>Frame</code> <p>The mtcars dataset.</p> <p>Examples:</p> <pre><code>from plotjs import data\n\ndf = data.load_mtcars()\n</code></pre> <pre><code>from plotjs import data\n\ndf = data.load_mtcars(\"polars\")\n</code></pre> <pre><code>from plotjs import data\n\ndf = data.load_mtcars(\"pyarrow\")\n</code></pre>"},{"location":"reference/datasets/#plotjs.data.load_titanic","title":"<code>plotjs.data.load_titanic(output_format='pandas')</code>","text":"<p>Load the titanic dataset.</p> <p>Parameters:</p> Name Type Description Default <code>output_format</code> <code>str</code> <p>The output format of the dataframe. Note that, for example, if you set <code>output_format=\"polars\"</code>, you must have polars installed. Must be one of the following: \"pandas\", \"polars\", \"pyarrow\", \"modin\", \"cudf\". Default to \"pandas\".</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>Frame</code> <p>The titanic dataset.</p> <p>Examples:</p> <pre><code>from plotjs import data\n\ndf = data.load_titanic()\n</code></pre> <pre><code>from plotjs import data\n\ndf = data.load_titanic(\"polars\")\n</code></pre> <pre><code>from plotjs import data\n\ndf = data.load_titanic(\"pyarrow\")\n</code></pre>"},{"location":"reference/javascript/","title":"JavaScript","text":"<p><code>plotjs</code> offers a few utility functions to work with JavaScript, and a guide on how to work with JavaScript.</p> <p></p>"},{"location":"reference/javascript/#plotjs.javascript.from_file","title":"<code>plotjs.javascript.from_file(javascript_file)</code>","text":"<p>Get raw javascript from a javascript file. This function just reads the js from a given file.</p> <p>Parameters:</p> Name Type Description Default <code>javascript_file</code> <code>str</code> <p>Path to a js file.</p> required <p>Returns:</p> Type Description <code>str</code> <p>A string of raw javascript.</p> <p>Examples:</p> <pre><code>from plotjs import javascript\n\njavascript.from_file(\"path/to/script.js\")\n</code></pre>"},{"location":"reference/plotjs/","title":"PlotJS","text":""},{"location":"reference/plotjs/#plotjs.main.PlotJS","title":"<code>plotjs.main.PlotJS</code>","text":"<p>Class to convert static matplotlib plots to interactive charts.</p> <p>Attributes:</p> Name Type Description <code>-</code> <code>additional_css</code> <p>All the CSS added via <code>add_css()</code></p> <code>-</code> <code>additional_javascript</code> <p>All the JavaScript added via <code>add_javascript()</code></p>"},{"location":"reference/plotjs/#plotjs.main.PlotJS.__init__","title":"<code>__init__(fig=None, seed=None, **savefig_kws)</code>","text":"<p>Initiate an <code>PlotJS</code> instance to convert matplotlib figures to interactive charts.</p> <p>Parameters:</p> Name Type Description Default <code>fig</code> <code>Figure | None</code> <p>An optional matplotlib figure. If None, uses <code>plt.gcf()</code>.</p> <code>None</code> <code>seed</code> <code>int | None</code> <p>Optional seed to make the output more reproducible.</p> <code>None</code> <code>savefig_kws</code> <code>dict</code> <p>Additional keyword arguments passed to <code>plt.savefig()</code>.</p> <code>{}</code>"},{"location":"reference/plotjs/#plotjs.main.PlotJS.add_css","title":"<code>add_css(css_content)</code>","text":"<p>Add CSS to the final HTML output. This function allows you to override default styles or add custom CSS rules.</p> <p>See the CSS guide for more info on how to work with CSS.</p> <p>Parameters:</p> Name Type Description Default <code>css_content</code> <code>str</code> <p>CSS rules to apply, as a string.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>PlotJS</code> <p>Returns the instance to allow method chaining.</p> <p>Examples:</p> <pre><code>PlotJS(...).add_css('.tooltip {\"color\": \"red\";}')\n</code></pre> <pre><code>from plotjs import css\n\nPlotJS(...).add_css(css.from_file(\"path/to/style.css\"))\n</code></pre> <pre><code>from plotjs import css\n\nPlotJS(...).add_css(css.from_dict({\".tooltip\": {\"color\": \"red\";}}))\n</code></pre> <pre><code>from plotjs import css\n\nPlotJS(...).add_css(\n    css.from_dict({\".tooltip\": {\"color\": \"red\";}}),\n).add_css(\n    css.from_dict({\".tooltip\": {\"background\": \"blue\";}}),\n)\n</code></pre>"},{"location":"reference/plotjs/#plotjs.main.PlotJS.add_javascript","title":"<code>add_javascript(javascript_content)</code>","text":"<p>Add custom JavaScript to the final HTML output. This function allows users to enhance interactivity, define custom behaviors, or extend the existing chart logic.</p> <p>Parameters:</p> Name Type Description Default <code>javascript_content</code> <code>str</code> <p>JavaScript code to include, as a string.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>PlotJS</code> <p>Returns the instance to allow method chaining.</p> <p>Examples:</p> <pre><code>PlotJS(...).add_javascript(\"console.log('Custom JS loaded!');\")\n</code></pre> <pre><code>from plotjs import javascript\n\ncustom_js = javascript.from_file(\"script.js\")\nPlotJS(...).add_javascript(custom_js)\n</code></pre>"},{"location":"reference/plotjs/#plotjs.main.PlotJS.add_tooltip","title":"<code>add_tooltip(*, labels=None, groups=None, tooltip_x_shift=0, tooltip_y_shift=0, hover_nearest=False, ax=None)</code>","text":"<p>Add a tooltip to the interactive plot. You can set either just <code>labels</code>, just <code>groups</code>, both or none.</p> <p>Parameters:</p> Name Type Description Default <code>labels</code> <code>list | tuple | ndarray | SeriesT | None</code> <p>An iterable containing the labels for the tooltip. It corresponds to the text that will appear on hover.</p> <code>None</code> <code>groups</code> <code>list | tuple | ndarray | SeriesT | None</code> <p>An iterable containing the group for tooltip. It corresponds to how to 'group' the tooltip. The easiest way to understand this argument is to check the examples below. Also note that the use of this argument is required to 'connect' the legend with plot elements.</p> <code>None</code> <code>tooltip_x_shift</code> <code>int</code> <p>Number of pixels to shift the tooltip from the cursor, on the x axis.</p> <code>0</code> <code>tooltip_y_shift</code> <code>int</code> <p>Number of pixels to shift the tooltip from the cursor, on the y axis.</p> <code>0</code> <code>hover_nearest</code> <code>bool</code> <p>When <code>True</code>, hover the nearest plot element.</p> <code>False</code> <code>ax</code> <code>Axes | None</code> <p>A matplotlib Axes. If <code>None</code> (default), uses first Axes.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>self</code> <code>PlotJS</code> <p>Returns the instance to allow method chaining.</p> <p>Examples:</p> <pre><code>PlotJS(...).add_tooltip(\n    labels=[\"S&amp;P500\", \"CAC40\", \"Sunflower\"],\n)\n</code></pre> <pre><code>PlotJS(...).add_tooltip(\n    labels=[\"S&amp;P500\", \"CAC40\", \"Sunflower\"],\n    columns=[\"S&amp;P500\", \"CAC40\", \"Sunflower\"],\n)\n</code></pre> <pre><code>PlotJS(...).add_tooltip(\n    labels=[\"S&amp;P500\", \"CAC40\", \"Sunflower\"],\n    hover_nearest=True,\n)\n</code></pre>"},{"location":"reference/plotjs/#plotjs.main.PlotJS.as_html","title":"<code>as_html()</code>","text":"<p>Retrieve the interactive plot as an HTML string. This can be useful to display the plot in environment such as marimo, or do advanced customization.</p> <p>Returns:</p> Type Description <code>str</code> <p>A string with all the HTML of the plot.</p> <p>Examples:</p> <pre><code>import marimo as mo\nfrom plotjs import PlotJS, data\n\ndf = data.load_iris()\n\nhtml_plot = (\n    PlotJS(fig=fig)\n    .add_tooltip(labels=df[\"species\"])\n    .as_html()\n)\n\n# display in marimo\nmo.iframe(html_plot)\n</code></pre>"},{"location":"reference/plotjs/#plotjs.main.PlotJS.save","title":"<code>save(file_path, favicon_path='https://github.com/JosephBARBIERDARNAL/static/blob/main/python-libs/plotjs/favicon.ico?raw=true', document_title='Made with plotjs')</code>","text":"<p>Save the interactive matplotlib plots to an HTML file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>Where to save the HTML file. If the \".html\" extension is missing, it's added.</p> required <code>favicon_path</code> <code>str</code> <p>Path to a favicon file, remote or local. The default is the logo of plotjs.</p> <code>'https://github.com/JosephBARBIERDARNAL/static/blob/main/python-libs/plotjs/favicon.ico?raw=true'</code> <code>document_title</code> <code>str</code> <p>String used for the page title (the title tag inside the head of the html document).</p> <code>'Made with plotjs'</code> <p>Returns:</p> Type Description <code>PlotJS</code> <p>The instance itself to allow method chaining.</p> <p>Examples:</p> <pre><code>PlotJS(...).save(\"index.html\")\n</code></pre> <pre><code>PlotJS(...).save(\"path/to/my_chart.html\")\n</code></pre>"}]}